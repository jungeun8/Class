<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="java.sun.com/xml/ns/javaee" 
	xmlns:xsi="w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="java.sun.com/xml/ns/javaee java.sun.com/xml/ns/javaee/web-app_3_0.xsd" 
	version="3.0">
	
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/context-root.xml</param-value>
	</context-param>
	
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- 
		모든 URL 요청이 접수될 때마다 실행되는 서블릿 배포하기
			* <url-pattern>/</url-pattern>은 모든 URL 요청을 뜻한다.
			* <servlet-name>app</servlet-name>
		      <url-pattern>/</url-pattern>
		      모든 URL 요청에 대해서 app라는 이름을 가진 서블릿이 그 요청을 처리하도록 함
		    * <servlet-name>app</servlet-name>
		      <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		      DispatcherSevelet을 app라는 이름으로 배포함.
		    * 따라서, 모든 URL 요청에 대해서 DispatcherServlet이 실행됨
		    
		Spring Container 생성하기
			* <init-param/>은 서블릿에게 설정정보를 전달할 때 사용하는 태그다.
			* contextConfigLocation이라는 이름으로 스프링 설정파일의 경로를 설정하면 DispatcherServlet이
			  설정파일을 읽어서 스프링 컨테이너를 생성하고, 설정파일의 설정정보를 분석해서 객체 생성/의존성 주입을 한다.
			  
		Tomcat 시작될 때 서블릿객체가 생성되고, 초기화까지 완료되게 하기
			* <load-on-startup>1</load-on-startup> 태그는 톰캣이 시작되면 
			  이 태그가 붙어있는 서블릿을 생성하고, 초기화시킨다.
			* 가운데 숫자는 우선순위다. 숫자가 낮을 수록 빨리 생성/초기화된다.
	 -->
	<servlet>
		<servlet-name>app</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/context-web.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>app</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
</web-app>