	스프링의 예외처리
		- @ExceptionHandler를 이용해서 예외를 처리한다.
		- 작성예
			@ExceptionHandler(예외클래스명.class)
			public String handle예외클래스명(예외클래스 ex) {
				return "에러페이지"
			}
			* 위와 같이 예외처리를 한 경우 JSP에서 에러정보 표시하기
				<%@ page isErrorPage="true" %> 페이지 지시어에서 isErrorPage속성을 true로 설정한다.
				예외객체를 보관하는 JSP 내장객체(exception)가 추가된다.
				<%=exception.getMessage() %> 표현식으로 에러메세지를 화면에 표시할 수 있다.
	
			@ExceptionHandler(예외클래스명.class)
			public String handle예외클래스명(예외클래스 ex, Model model) {
				model.addAttribute("error", ex);
				return "에러페이지"
			}
			* 위와 같이 예외처리를 한 경우 JSP에서 에러정보 표시하기
				${error.message} 로 에러메세지를 화면에 표시할 수 있다.
	
		- 예외처리의 구분
			- Controller에서 예외처리
				- 해당 컨트롤러에 특화된 예외처리
				- 작성예
					@Controller
					public class HomeController {
						@ExceptionHandler(예외클래스명.class)
						public String handle예외클래스명(예외클래스 ex, Model model) {
							model.addAttribute("error", 에러정보);
							return "에러페이지"
						}
					}
			- ControllerAdvice에서 예외처리
				- 글로벌 예외처리
				- 모든 컨트롤러에 공통적으로 적용되는 예외처리
				- 작성예
					@ControllerAdvice
					public class ExceptionHandlerAdvice {
						@ExceptionHandler(예외클래스명.class)
						public String handle예외클래스명(예외클래스 ex, Model model) {
							model.addAttribute("error", 에러정보);
							return "에러페이지"
						}
					}
	
	web.xml에서 에러페이지 설정하기
		<error-page>
			<exception-type>패키지를 포함한 예외클래스명</exception-type>
			<location>/WEB-INF/views/error/xxx.jsp</location>
		</error-page>
		<error-page>
			<error-code>에러코드</error-code>
			<location>/WEB-INF/views/error/xxx.jsp</location>
		</error-page>
